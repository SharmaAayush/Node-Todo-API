{
  "stats": {
    "suites": 13,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-13T10:56:53.372Z",
    "end": "2018-05-13T10:57:39.863Z",
    "duration": 46491,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "fd39a71a-b212-46f9-97ec-3fe08937cf0b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": " \"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 906,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "60581418-48da-47ce-9c32-a75188a612c1",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateTodos",
        "fullTitle": " \"before each\" hook: populateTodos",
        "timedOut": false,
        "duration": 3,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "c8069ba3-6253-41b5-ae4d-c7cd870db7ac",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "caf17bc0-fe3a-4f3a-88bf-70fbd7e6dc1f",
        "title": "User Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a0fc3c50-8ba7-4036-8393-a0e0270a1522",
            "title": "POST /users",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "User Route Tests POST /users should create a new user",
                "timedOut": false,
                "duration": 388,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser@example.com';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(res.body._id).then((user) => {\n      expect(user).toBeTruthy();\n      expect(user.password).not.toBe(password);\n      expect(user.username).toBe(username);\n      done();\n    }).catch(err => done(err));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "66cb91b9-c0ed-462b-ba7c-15cd87c11111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return validation error if request is invalid",
                "fullTitle": "User Route Tests POST /users should return validation error if request is invalid",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b78535cd-69cd-49f3-ada1-1b41af796972",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error for requests with incomplete data",
                "fullTitle": "User Route Tests POST /users should return an error for requests with incomplete data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let email = \"testUser@example.com\";\nlet password = \"testPassword\";\nrequest(app)\n  .post('/users')\n  .send({email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4708f934-86b1-411a-8671-f1f0ec5e03a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a user if the email is already in use",
                "fullTitle": "User Route Tests POST /users should not create a user if the email is already in use",
                "timedOut": false,
                "duration": 347,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = users[0].email;\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done)",
                "err": {},
                "isRoot": false,
                "uuid": "848e6c02-6af6-47d9-a16b-959fb90c62a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66cb91b9-c0ed-462b-ba7c-15cd87c11111",
              "b78535cd-69cd-49f3-ada1-1b41af796972",
              "4708f934-86b1-411a-8671-f1f0ec5e03a1",
              "848e6c02-6af6-47d9-a16b-959fb90c62a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 751,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "af37c71b-3ca4-4f72-9783-2bdb96444e31",
            "title": "GET /users/me",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return user if authenticated",
                "fullTitle": "User Route Tests GET /users/me should return user if authenticated",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((res) => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.email).toBe(users[0].email);\n    expect(res.body.emailVarified).toBe(users[0].emailVarified);\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1f78383c-674e-4f8e-b0c0-0c200d9f2526",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if unauthenticated user sends request",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if unauthenticated user sends request",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .expect(401)\n  .expect((res) => {\n    expect(res.body).toEqual({});\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fb0c7837-0071-4c0b-885a-8ffb8193041e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/users/me')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4b265c7c-ab88-48fe-9609-f4cedb87f079",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1f78383c-674e-4f8e-b0c0-0c200d9f2526",
              "fb0c7837-0071-4c0b-885a-8ffb8193041e",
              "4b265c7c-ab88-48fe-9609-f4cedb87f079"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6f0cf18d-e97b-4009-89ce-fc04e233803d",
            "title": "POST /users/login",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should login a valid user and return auth token",
                "fullTitle": "User Route Tests POST /users/login should login a valid user and return auth token",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password\n  })\n  .expect(200)\n  .expect((res) => {\n    expect(res.headers['x-auth']).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.toObject().tokens[1]).toMatchObject({\n        access: 'auth',\n        token: res.headers['x-auth']\n      });\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "08a1f552-4d92-4327-9eb5-c28fb20989d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject invalid login",
                "fullTitle": "User Route Tests POST /users/login should reject invalid login",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password + 1\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.headers['x-auth']).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.tokens.length).toBe(1);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7abddeee-184a-49eb-be61-fdb2858b02b7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08a1f552-4d92-4327-9eb5-c28fb20989d2",
              "7abddeee-184a-49eb-be61-fdb2858b02b7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 625,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7725d130-f294-441d-a331-dd8fc41d16a9",
            "title": "DELETE /users/me/token",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove auth token on logout",
                "fullTitle": "User Route Tests DELETE /users/me/token should remove auth token on logout",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id).then(user => {\n      expect(user.tokens.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ff0ee598-df28-4ec1-878b-6b072628acb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for unauthenticated access",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error for unauthenticated access",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fbf136da-11d7-45af-a520-b18ce7821a03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token used was not generated by the backend",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error if authentication token used was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete('/users/me/token')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f8c13195-9967-45db-9f0e-2bec940b697f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff0ee598-df28-4ec1-878b-6b072628acb5",
              "fbf136da-11d7-45af-a520-b18ce7821a03",
              "f8c13195-9967-45db-9f0e-2bec940b697f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a44e7c13-c000-4abf-99e2-0a98fc11d54c",
            "title": "GET /users/emailVerification",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should generate a email verification link for authenticated users",
                "fullTitle": "User Route Tests GET /users/emailVerification should generate a email verification link for authenticated users",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVerificationLink).toBeTruthy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ccd378aa-d3b1-4b29-81bb-8588fbd58930",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject unauthenticated acces with a 401 error code",
                "fullTitle": "User Route Tests GET /users/emailVerification should reject unauthenticated acces with a 401 error code",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6f1ef8f2-40c8-461f-9a13-30cbe972e16c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token being used was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/emailVerification should return a 401 error if authentication token being used was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\n\nrequest(app)\n  .get('/users/emailVerification')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e2feefa6-9f41-4bd6-81a8-772b74296abc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ccd378aa-d3b1-4b29-81bb-8588fbd58930",
              "6f1ef8f2-40c8-461f-9a13-30cbe972e16c",
              "e2feefa6-9f41-4bd6-81a8-772b74296abc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9d6d9ace-0a0a-4f04-81c4-94600cf741d8",
            "title": "GET /users/verify",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should verify the user's email when requested with proper query parameters",
                "fullTitle": "User Route Tests GET /users/verify should verify the user's email when requested with proper query parameters",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: users[2].emailVerificationLink.toHexString()\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.user.email).toBe(users[2].email);\n    expect(res.body.user.emailVarified).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVarified).toBeTruthy();\n      expect(user.email).toBe(res.body.user.email);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f7d5c12b-c51e-481e-a182-2feecfdb5ac1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error for request without query parameters",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error for request without query parameters",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .expect(400)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9063d058-2029-494f-9751-dbcf7d26dd33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error with a message if a user with provided email does not exist",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error with a message if a user with provided email does not exist",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: 'invalidUser@example.com',\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "07aa98dd-02dc-4064-9912-6e72c7bf4aa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 if verification query param was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 if verification query param was not generated by the backend",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "20b1e5ec-f643-4a9f-8990-82915dd4425f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7d5c12b-c51e-481e-a182-2feecfdb5ac1",
              "9063d058-2029-494f-9751-dbcf7d26dd33",
              "07aa98dd-02dc-4064-9912-6e72c7bf4aa4",
              "20b1e5ec-f643-4a9f-8990-82915dd4425f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2046605d-6cf7-4cad-b239-37fb58ab5844",
        "title": "Todo Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8e6c32d0-61db-494c-aadf-252d2ff1c169",
            "title": "POST /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "35c6104d-0fc8-4bc4-b6db-d2663aff33c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests POST /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nlet todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "767d6cf3-e811-4420-92a2-fa6914cfd7e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for user accessing this route without verifying their email",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "354bf62f-3b7b-46d0-8753-699590c6636a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo if incomplete todo is provided",
                "fullTitle": "Todo Route Tests POST /todos should not create a new todo if incomplete todo is provided",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(400)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "352f6d19-4ee8-458b-8b4a-b3e6cb6b080f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo if an authenticated user requests with with valid todo",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo if an authenticated user requests with with valid todo",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo.title).toBe(res.body.title);\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3e061c33-14b9-4b84-ade4-a283c85df0fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo without reminder if invalid reminder date was provided",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo without reminder if invalid reminder date was provided",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  reminder: 'invalid date format'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.reminder).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(todo.reminder).toBeFalsy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a888edb9-e9c1-4d2e-92b0-32ca9e9ae322",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not take the completedAt attribute value from the user",
                "fullTitle": "Todo Route Tests POST /todos should not take the completedAt attribute value from the user",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  completed: true,\n  completedAt: 24514\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n    expect(res.body.completed).toBe(todo.completed);\n    expect(new Date(res.body.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(data => {\n      expect(data._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(data.completed).toBe(true);\n      expect(new Date(data.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n      expect(new Date(data.completedAt).getTime()).toBe(new Date(res.body.completedAt).getTime());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "352960c2-8515-4778-940c-a09604de38dc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35c6104d-0fc8-4bc4-b6db-d2663aff33c2",
              "767d6cf3-e811-4420-92a2-fa6914cfd7e1",
              "354bf62f-3b7b-46d0-8753-699590c6636a",
              "352f6d19-4ee8-458b-8b4a-b3e6cb6b080f",
              "3e061c33-14b9-4b84-ade4-a283c85df0fa",
              "a888edb9-e9c1-4d2e-92b0-32ca9e9ae322",
              "352960c2-8515-4778-940c-a09604de38dc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c489e59d-bea2-47b1-8c07-94ea0b228e7d",
            "title": "GET /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6e29a15f-4bc3-4de6-b254-86dcb7f04a82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/todos')\n  .set('x-auth', token)\n  .expect(401)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ce3a8282-c4fe-4ecd-9a0b-6881c634f75f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "10dab541-41e3-48f7-861d-4113cde1d1ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return all todos of an authenticated user",
                "fullTitle": "Todo Route Tests GET /todos should return all todos of an authenticated user",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todos.length).toBe(1);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(res.body.todos.length);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dc255ea0-9466-45ef-8045-748ef13ecede",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e29a15f-4bc3-4de6-b254-86dcb7f04a82",
              "ce3a8282-c4fe-4ecd-9a0b-6881c634f75f",
              "10dab541-41e3-48f7-861d-4113cde1d1ff",
              "dc255ea0-9466-45ef-8045-748ef13ecede"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d6d4018e-9ed5-4cc5-9c39-1fe384cc65e2",
            "title": "GET /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e145e155-67ed-4aee-abf1-24cddfe81800",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "61f98e64-1335-4e2e-9779-b24362488f04",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "39972cce-be06-4292-98f5-4823411b7f40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e86bfb83-11b6-4684-8fcc-fc33fd72a126",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[1]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c742ad02-adc5-4b2a-831d-20dd5fb82906",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the todo if an authenticated user requests for a todo belonging to him",
                "fullTitle": "Todo Route Tests GET /todos/:id should return the todo if an authenticated user requests for a todo belonging to him",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findOne({_id: res.body.todo._id, _creator: res.body.todo._creator}).then(todo => {\n      expect(todo._id.toHexString()).toBe(todos[0]._id.toHexString());\n      expect(todo._creator.toHexString()).toBe(todos[0]._creator.toHexString());\n      expect(todo.title).toBe(todos[0].title);\n      expect(todo.description).toBe(todos[0].description);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7bbb11ba-0872-404d-94b0-96e4cfccb6e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e145e155-67ed-4aee-abf1-24cddfe81800",
              "61f98e64-1335-4e2e-9779-b24362488f04",
              "39972cce-be06-4292-98f5-4823411b7f40",
              "e86bfb83-11b6-4684-8fcc-fc33fd72a126",
              "c742ad02-adc5-4b2a-831d-20dd5fb82906",
              "7bbb11ba-0872-404d-94b0-96e4cfccb6e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 43,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3450ac18-10c8-4928-ace6-4cc6b9c81340",
            "title": "DELETE /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4c2e96f1-e126-4ae2-a92c-a4179384ea92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1ba0a647-b430-423a-aa85-36c850d8ccf2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9af0d731-5b94-4fa9-9994-13602d552be5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "78194580-9189-4fcf-ba45-11555cab0e07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should not delete the todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .expect(404)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(1);\n      expect(todos[0]._id.toHexString()).toBe(todos[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "61582c68-9c3a-4881-af03-cfcb77ce35e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should delete the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    \n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dbd6e7c8-10ae-42f5-822a-155ad429954f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c2e96f1-e126-4ae2-a92c-a4179384ea92",
              "1ba0a647-b430-423a-aa85-36c850d8ccf2",
              "9af0d731-5b94-4fa9-9994-13602d552be5",
              "78194580-9189-4fcf-ba45-11555cab0e07",
              "61582c68-9c3a-4881-af03-cfcb77ce35e5",
              "dbd6e7c8-10ae-42f5-822a-155ad429954f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "180dff33-ccdd-40ee-bb44-101b2050c727",
            "title": "PATCH /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 for unauthenticated access to this route",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6b65f275-9e55-4ba7-9b79-19a0dd262c7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nlet token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bfb966d5-871b-4dc4-bfab-796aefceb5a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d7c52e32-812e-4df2-b858-759e7c38f8c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/24514221`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "090f7718-e4c1-4951-8952-73cbd8c187d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should not update todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "39d3a0f5-7df2-45ed-af94-d8eddfc72f0b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should update the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todo.title);\n    expect(res.body.todo.completed).toBe(todo.completed);\n    expect(res.body.todo.completedAt).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(todos[0]._id).then(data => {\n      expect(data._id.toHexString()).toBe(res.body.todo._id);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "05f087b2-525a-425e-a384-19d69559bcdd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6b65f275-9e55-4ba7-9b79-19a0dd262c7d",
              "bfb966d5-871b-4dc4-bfab-796aefceb5a9",
              "d7c52e32-812e-4df2-b858-759e7c38f8c8",
              "090f7718-e4c1-4951-8952-73cbd8c187d4",
              "39d3a0f5-7df2-45ed-af94-d8eddfc72f0b",
              "05f087b2-525a-425e-a384-19d69559bcdd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}