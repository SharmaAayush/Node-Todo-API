{
  "stats": {
    "suites": 7,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-12T15:23:14.933Z",
    "end": "2018-05-12T15:23:33.835Z",
    "duration": 18902,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "bb4462cd-021d-4539-a5fd-0ac4f8f6060a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": " \"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 904,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "d9edf45d-5cbc-4229-b0c8-95fb4d760596",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateTodos",
        "fullTitle": " \"before each\" hook: populateTodos",
        "timedOut": false,
        "duration": 4,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "c188eb2c-9257-4010-8021-da0832c611df",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "47af5eaa-334c-42d5-9bf5-8164e2efa364",
        "title": "User Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5651fa09-c68a-4841-a03b-3e8560997c85",
            "title": "POST /users",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "User Route Tests POST /users should create a new user",
                "timedOut": false,
                "duration": 400,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser@example.com';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(200)\n  .end((err) => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({email}).then((user) => {\n      expect(user).toBeTruthy();\n      expect(user.password).not.toBe(password);\n      expect(user.username).toBe(username);\n      done();\n    }).catch(err => done(err));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4eb8ed3c-1ab5-48b8-baf1-46a9fd168515",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return validation error if request is invalid",
                "fullTitle": "User Route Tests POST /users should return validation error if request is invalid",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ac3c525f-646e-4df6-850e-a9a31e622916",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error for requests with incomplete data",
                "fullTitle": "User Route Tests POST /users should return an error for requests with incomplete data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let email = \"testUser@example.com\";\nlet password = \"testPassword\";\nrequest(app)\n  .post('/users')\n  .send({email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "71dd70af-f409-444b-8378-c79717ef611d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a user if the email is already in use",
                "fullTitle": "User Route Tests POST /users should not create a user if the email is already in use",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = users[0].email;\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done)",
                "err": {},
                "isRoot": false,
                "uuid": "ab34c4eb-675f-4ebf-96e3-8959fdb6a8e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4eb8ed3c-1ab5-48b8-baf1-46a9fd168515",
              "ac3c525f-646e-4df6-850e-a9a31e622916",
              "71dd70af-f409-444b-8378-c79717ef611d",
              "ab34c4eb-675f-4ebf-96e3-8959fdb6a8e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 720,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "812ade84-4719-4eb3-9383-dbe3864fb80d",
            "title": "GET /users/me",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return user if authenticated",
                "fullTitle": "User Route Tests GET /users/me should return user if authenticated",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((res) => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.email).toBe(users[0].email);\n    expect(res.body.emailVarified).toBe(users[0].emailVarified);\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ba53d6f1-55bd-4398-8b55-3e75a0264ccd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if unauthenticated user sends request",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if unauthenticated user sends request",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .expect(401)\n  .expect((res) => {\n    expect(res.body).toEqual({});\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2ba80b7a-e89a-41da-ab41-8af152a90c76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/users/me')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0971f1cd-6b82-40a8-9e37-410f71dbe797",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba53d6f1-55bd-4398-8b55-3e75a0264ccd",
              "2ba80b7a-e89a-41da-ab41-8af152a90c76",
              "0971f1cd-6b82-40a8-9e37-410f71dbe797"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4f650050-f696-474e-9363-9a2b742cb933",
            "title": "POST /users/login",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should login a valid user and return auth token",
                "fullTitle": "User Route Tests POST /users/login should login a valid user and return auth token",
                "timedOut": false,
                "duration": 311,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password\n  })\n  .expect(200)\n  .expect((res) => {\n    expect(res.headers['x-auth']).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.toObject().tokens[1]).toMatchObject({\n        access: 'auth',\n        token: res.headers['x-auth']\n      });\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bdc16b17-371d-4e8b-8002-8bb910d71dae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject invalid login",
                "fullTitle": "User Route Tests POST /users/login should reject invalid login",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password + 1\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.headers['x-auth']).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.tokens.length).toBe(1);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2ec3309e-80fc-4141-adc0-09ac7d5b6c43",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bdc16b17-371d-4e8b-8002-8bb910d71dae",
              "2ec3309e-80fc-4141-adc0-09ac7d5b6c43"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 616,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b2629a02-2d51-4a59-a864-820f33c1392b",
            "title": "DELETE /users/me/token",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove auth token on logout",
                "fullTitle": "User Route Tests DELETE /users/me/token should remove auth token on logout",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id).then(user => {\n      expect(user.tokens.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "65b87b4e-662c-49d9-920f-35123486b160",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for unauthenticated access",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error for unauthenticated access",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "55ab7485-495e-4fd0-bbc4-d9f590423e96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token used was not generated by the backend",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error if authentication token used was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete('/users/me/token')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "95ae6a9b-d904-412f-ab84-cb27db56c131",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "65b87b4e-662c-49d9-920f-35123486b160",
              "55ab7485-495e-4fd0-bbc4-d9f590423e96",
              "95ae6a9b-d904-412f-ab84-cb27db56c131"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4f4db187-3cb8-4fe9-8c73-176642d35e66",
            "title": "GET /users/emailVerification",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should generate a email verification link for authenticated users",
                "fullTitle": "User Route Tests GET /users/emailVerification should generate a email verification link for authenticated users",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVerificationLink).toBeTruthy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "10175e6a-e8a6-4da0-bd26-ea17e2684f0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject unauthenticated acces with a 401 error code",
                "fullTitle": "User Route Tests GET /users/emailVerification should reject unauthenticated acces with a 401 error code",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "05c8a1a9-c40d-45e7-8ca5-9063f9aeb6fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token being used was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/emailVerification should return a 401 error if authentication token being used was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\n\nrequest(app)\n  .get('/users/emailVerification')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "db92aea0-bb76-45e8-9210-a0bf445c455a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10175e6a-e8a6-4da0-bd26-ea17e2684f0a",
              "05c8a1a9-c40d-45e7-8ca5-9063f9aeb6fe",
              "db92aea0-bb76-45e8-9210-a0bf445c455a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b73c9e20-93be-4066-afb2-6050c3399fd2",
            "title": "GET /users/verify",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should verify the user's email when requested with proper query parameters",
                "fullTitle": "User Route Tests GET /users/verify should verify the user's email when requested with proper query parameters",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: users[2].emailVerificationLink.toHexString()\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.user.email).toBe(users[2].email);\n    expect(res.body.user.emailVarified).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVarified).toBeTruthy();\n      expect(user.email).toBe(res.body.user.email);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a53a7453-61e3-44f3-9e0b-d840f084be93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error for request without query parameters",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error for request without query parameters",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .expect(400)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e7754032-1dfb-4bc1-bf0a-9460027c8545",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error with a message if a user with provided email does not exist",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error with a message if a user with provided email does not exist",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: 'invalidUser@example.com',\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e4860693-a3d4-456d-a357-8746797b8004",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 if verification query param was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 if verification query param was not generated by the backend",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cebf432c-2155-4b57-a4f9-c86c5d8479bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a53a7453-61e3-44f3-9e0b-d840f084be93",
              "e7754032-1dfb-4bc1-bf0a-9460027c8545",
              "e4860693-a3d4-456d-a357-8746797b8004",
              "cebf432c-2155-4b57-a4f9-c86c5d8479bf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}