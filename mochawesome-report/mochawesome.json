{
  "stats": {
    "suites": 13,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-13T08:32:41.788Z",
    "end": "2018-05-13T08:33:26.948Z",
    "duration": 45160,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "af477b8c-2010-41c8-ae02-d3d49b518148",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": " \"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 894,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "09a2d168-cb6c-400e-9836-12489e8fadc7",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateTodos",
        "fullTitle": " \"before each\" hook: populateTodos",
        "timedOut": false,
        "duration": 3,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "d3ec9d3c-5e6b-495c-96b0-3e6f140178d7",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "cb42e3d1-b3e3-41a2-a9eb-6c39d0ba3ab1",
        "title": "User Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3a350243-357f-4248-96fd-28c7c4d254f6",
            "title": "POST /users",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "User Route Tests POST /users should create a new user",
                "timedOut": false,
                "duration": 379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser@example.com';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(200)\n  .end((err) => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({email}).then((user) => {\n      expect(user).toBeTruthy();\n      expect(user.password).not.toBe(password);\n      expect(user.username).toBe(username);\n      done();\n    }).catch(err => done(err));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e1418846-1d4f-4654-9b16-ba705afdd16b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return validation error if request is invalid",
                "fullTitle": "User Route Tests POST /users should return validation error if request is invalid",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4ef30789-dc24-416b-bc97-7520ba0adeeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error for requests with incomplete data",
                "fullTitle": "User Route Tests POST /users should return an error for requests with incomplete data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let email = \"testUser@example.com\";\nlet password = \"testPassword\";\nrequest(app)\n  .post('/users')\n  .send({email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "105898bf-1394-49c5-90be-50000743d3ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a user if the email is already in use",
                "fullTitle": "User Route Tests POST /users should not create a user if the email is already in use",
                "timedOut": false,
                "duration": 313,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = users[0].email;\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done)",
                "err": {},
                "isRoot": false,
                "uuid": "8d1e9350-c0ad-4a07-9f8a-c99afaa14f78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1418846-1d4f-4654-9b16-ba705afdd16b",
              "4ef30789-dc24-416b-bc97-7520ba0adeeb",
              "105898bf-1394-49c5-90be-50000743d3ad",
              "8d1e9350-c0ad-4a07-9f8a-c99afaa14f78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 708,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1aafe393-f0ba-4695-8a8a-ca1e9294fbb7",
            "title": "GET /users/me",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return user if authenticated",
                "fullTitle": "User Route Tests GET /users/me should return user if authenticated",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((res) => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.email).toBe(users[0].email);\n    expect(res.body.emailVarified).toBe(users[0].emailVarified);\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "95d85c29-8678-454a-b1a9-ac013241ba9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if unauthenticated user sends request",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if unauthenticated user sends request",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .expect(401)\n  .expect((res) => {\n    expect(res.body).toEqual({});\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "be3ad54e-504b-4e69-9056-4eb1e1542473",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/users/me')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1279615c-b726-4e1a-89f8-3da48b636f21",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95d85c29-8678-454a-b1a9-ac013241ba9d",
              "be3ad54e-504b-4e69-9056-4eb1e1542473",
              "1279615c-b726-4e1a-89f8-3da48b636f21"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1f644368-cd62-4d40-af64-e9673e2df78c",
            "title": "POST /users/login",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should login a valid user and return auth token",
                "fullTitle": "User Route Tests POST /users/login should login a valid user and return auth token",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password\n  })\n  .expect(200)\n  .expect((res) => {\n    expect(res.headers['x-auth']).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.toObject().tokens[1]).toMatchObject({\n        access: 'auth',\n        token: res.headers['x-auth']\n      });\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a22cb010-8f1d-4104-ba20-ca84d8dfc420",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject invalid login",
                "fullTitle": "User Route Tests POST /users/login should reject invalid login",
                "timedOut": false,
                "duration": 328,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password + 1\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.headers['x-auth']).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.tokens.length).toBe(1);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "40d607e7-9792-4bff-b2cd-1c30c2698b14",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a22cb010-8f1d-4104-ba20-ca84d8dfc420",
              "40d607e7-9792-4bff-b2cd-1c30c2698b14"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 640,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2bf96801-4dbc-4822-ab1c-c25392643adf",
            "title": "DELETE /users/me/token",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove auth token on logout",
                "fullTitle": "User Route Tests DELETE /users/me/token should remove auth token on logout",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id).then(user => {\n      expect(user.tokens.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "864561df-42aa-4c6f-b26c-b050c3654019",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for unauthenticated access",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error for unauthenticated access",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "62efeb54-adc8-445e-985a-a9b97bc7b81b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token used was not generated by the backend",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error if authentication token used was not generated by the backend",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete('/users/me/token')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "206cb477-2b79-450f-885f-ebf5d8061847",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "864561df-42aa-4c6f-b26c-b050c3654019",
              "62efeb54-adc8-445e-985a-a9b97bc7b81b",
              "206cb477-2b79-450f-885f-ebf5d8061847"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b922c3ff-2c59-4bea-8e36-0d32a3730b7c",
            "title": "GET /users/emailVerification",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should generate a email verification link for authenticated users",
                "fullTitle": "User Route Tests GET /users/emailVerification should generate a email verification link for authenticated users",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVerificationLink).toBeTruthy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2b9a6de8-b991-4b35-b28a-6e9e78f7be0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject unauthenticated acces with a 401 error code",
                "fullTitle": "User Route Tests GET /users/emailVerification should reject unauthenticated acces with a 401 error code",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7bb79f71-54f9-408a-ad06-010bbc58469e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token being used was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/emailVerification should return a 401 error if authentication token being used was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\n\nrequest(app)\n  .get('/users/emailVerification')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1b88b6b3-bda4-47f7-9b5c-a5066c675c1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2b9a6de8-b991-4b35-b28a-6e9e78f7be0f",
              "7bb79f71-54f9-408a-ad06-010bbc58469e",
              "1b88b6b3-bda4-47f7-9b5c-a5066c675c1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 49,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b07069fb-bb5c-40db-ae2d-fa7e11d806bd",
            "title": "GET /users/verify",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should verify the user's email when requested with proper query parameters",
                "fullTitle": "User Route Tests GET /users/verify should verify the user's email when requested with proper query parameters",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: users[2].emailVerificationLink.toHexString()\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.user.email).toBe(users[2].email);\n    expect(res.body.user.emailVarified).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVarified).toBeTruthy();\n      expect(user.email).toBe(res.body.user.email);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b64050a8-ec84-4859-8461-349de813b420",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error for request without query parameters",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error for request without query parameters",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .expect(400)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ef503155-e212-4f22-a014-cd802478a088",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error with a message if a user with provided email does not exist",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error with a message if a user with provided email does not exist",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: 'invalidUser@example.com',\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "71c33d62-83a2-4653-ae21-f37d175dbbe3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 if verification query param was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 if verification query param was not generated by the backend",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "00d5609c-0868-47e5-b68a-999742869aa8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b64050a8-ec84-4859-8461-349de813b420",
              "ef503155-e212-4f22-a014-cd802478a088",
              "71c33d62-83a2-4653-ae21-f37d175dbbe3",
              "00d5609c-0868-47e5-b68a-999742869aa8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e78ade31-eb0c-43a3-b880-c9aae0a4e3a3",
        "title": "Todo Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3f097fef-3ef7-41ce-802b-9baaecc61b33",
            "title": "POST /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8a82c870-a9cf-4e66-b163-b46b9ef2c202",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests POST /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nlet todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4ffecb34-8a42-4b32-8e60-201fad314352",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for user accessing this route without verifying their email",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "932a9bf8-0994-4942-ac6b-a1ce01520a87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo if incomplete todo is provided",
                "fullTitle": "Todo Route Tests POST /todos should not create a new todo if incomplete todo is provided",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(400)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "94aac8a0-0b09-42fc-bc6e-d78bda9909e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo if an authenticated user requests with with valid todo",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo if an authenticated user requests with with valid todo",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo.title).toBe(res.body.title);\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7403f27d-f288-42aa-b646-016cdcf3a853",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo without reminder if invalid reminder date was provided",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo without reminder if invalid reminder date was provided",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  reminder: 'invalid date format'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.reminder).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(todo.reminder).toBeFalsy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "141b3eba-23b2-4320-af69-cc352ad0eb5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not take the completedAt attribute value from the user",
                "fullTitle": "Todo Route Tests POST /todos should not take the completedAt attribute value from the user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  completed: true,\n  completedAt: 24514\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n    expect(res.body.completed).toBe(todo.completed);\n    expect(new Date(res.body.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(data => {\n      expect(data._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(data.completed).toBe(true);\n      expect(new Date(data.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n      expect(new Date(data.completedAt).getTime()).toBe(new Date(res.body.completedAt).getTime());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6d54c5ac-c39f-4920-b726-e7c0724fc3da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a82c870-a9cf-4e66-b163-b46b9ef2c202",
              "4ffecb34-8a42-4b32-8e60-201fad314352",
              "932a9bf8-0994-4942-ac6b-a1ce01520a87",
              "94aac8a0-0b09-42fc-bc6e-d78bda9909e3",
              "7403f27d-f288-42aa-b646-016cdcf3a853",
              "141b3eba-23b2-4320-af69-cc352ad0eb5f",
              "6d54c5ac-c39f-4920-b726-e7c0724fc3da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "255b3167-77f8-4454-b6a5-286a2e766c0d",
            "title": "GET /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "573d7ca7-9dc4-4681-a1af-4186aa1267bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/todos')\n  .set('x-auth', token)\n  .expect(401)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "418beb87-c84f-4f13-911b-31c449427b33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f37b40f0-a8b7-473a-859d-10780912e120",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return all todos of an authenticated user",
                "fullTitle": "Todo Route Tests GET /todos should return all todos of an authenticated user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todos.length).toBe(1);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(res.body.todos.length);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3392f966-965d-4940-9d05-39bc4791a9f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "573d7ca7-9dc4-4681-a1af-4186aa1267bf",
              "418beb87-c84f-4f13-911b-31c449427b33",
              "f37b40f0-a8b7-473a-859d-10780912e120",
              "3392f966-965d-4940-9d05-39bc4791a9f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fa713932-2be7-4b60-8e63-2563f70157d3",
            "title": "GET /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8ee0ded6-3606-4bda-90a0-223ea0a50364",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2ef4d29f-b579-418a-92de-1e1a4e386f4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5739f0e3-ea4b-4048-ae6c-d916cab50baf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b26f2a07-8127-4064-98da-d9b6056e013d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[1]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ccef5915-82c7-4068-95b6-9afc74528d7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the todo if an authenticated user requests for a todo belonging to him",
                "fullTitle": "Todo Route Tests GET /todos/:id should return the todo if an authenticated user requests for a todo belonging to him",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findOne({_id: res.body.todo._id, _creator: res.body.todo._creator}).then(todo => {\n      expect(todo._id.toHexString()).toBe(todos[0]._id.toHexString());\n      expect(todo._creator.toHexString()).toBe(todos[0]._creator.toHexString());\n      expect(todo.title).toBe(todos[0].title);\n      expect(todo.description).toBe(todos[0].description);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9013ece8-a5b2-461f-807b-94c4e49c1315",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ee0ded6-3606-4bda-90a0-223ea0a50364",
              "2ef4d29f-b579-418a-92de-1e1a4e386f4e",
              "5739f0e3-ea4b-4048-ae6c-d916cab50baf",
              "b26f2a07-8127-4064-98da-d9b6056e013d",
              "ccef5915-82c7-4068-95b6-9afc74528d7c",
              "9013ece8-a5b2-461f-807b-94c4e49c1315"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7601e750-d4c4-479e-8c1f-a9c9aec2953b",
            "title": "DELETE /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5ee9c9f4-7300-4e3e-8100-3fcd785bfd6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c9b3303f-33bc-4889-ad40-3a6bfd3bd597",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6fc9cfee-55ae-4a52-ace9-4e00ffab5d39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "658f5f1b-f464-495a-85e2-4cfa53afb4f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should not delete the todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .expect(404)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(1);\n      expect(todos[0]._id.toHexString()).toBe(todos[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ec0bd698-feb3-4134-a20d-6bf14c3a94a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should delete the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    \n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e56a1ae3-cd62-40b2-92e6-63bd1f050bd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ee9c9f4-7300-4e3e-8100-3fcd785bfd6e",
              "c9b3303f-33bc-4889-ad40-3a6bfd3bd597",
              "6fc9cfee-55ae-4a52-ace9-4e00ffab5d39",
              "658f5f1b-f464-495a-85e2-4cfa53afb4f1",
              "ec0bd698-feb3-4134-a20d-6bf14c3a94a8",
              "e56a1ae3-cd62-40b2-92e6-63bd1f050bd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4168cd62-c573-4210-9d0e-0c9ba22f5c57",
            "title": "PATCH /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9a4fc1e5-608f-4bd6-8876-22145b87d39d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nlet token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d6547c52-4a31-4d07-a5f9-1358430dfb47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b066294d-2eb6-431b-b952-a4a82510fc5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/24514221`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a48d9041-a09c-4d36-a5d7-1dc84e7a567c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should not update todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9ae8b0fb-2668-4e33-9067-e59ffdf8ba8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should update the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todo.title);\n    expect(res.body.todo.completed).toBe(todo.completed);\n    expect(res.body.todo.completedAt).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(todos[0]._id).then(data => {\n      expect(data._id.toHexString()).toBe(res.body.todo._id);\n      done();\n    }).catch(e => done(e));\n  })",
                "err": {},
                "isRoot": false,
                "uuid": "702adcc0-bee1-40e6-a1fb-694d596224fc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a4fc1e5-608f-4bd6-8876-22145b87d39d",
              "d6547c52-4a31-4d07-a5f9-1358430dfb47",
              "b066294d-2eb6-431b-b952-a4a82510fc5f",
              "a48d9041-a09c-4d36-a5d7-1dc84e7a567c",
              "9ae8b0fb-2668-4e33-9067-e59ffdf8ba8a",
              "702adcc0-bee1-40e6-a1fb-694d596224fc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}