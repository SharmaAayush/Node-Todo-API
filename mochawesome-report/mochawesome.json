{
  "stats": {
    "suites": 13,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-13T09:51:12.218Z",
    "end": "2018-05-13T09:51:58.278Z",
    "duration": 46060,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6922c9ec-1f49-4ddc-980e-1a5495358d3a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": " \"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 900,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "4361e5e7-e5a2-492d-b14e-736865390d53",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateTodos",
        "fullTitle": " \"before each\" hook: populateTodos",
        "timedOut": false,
        "duration": 2,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
        "err": {},
        "isRoot": true,
        "uuid": "6077d998-ab7b-4410-95ec-a944e37e17a0",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9c3db364-ad15-4a62-893d-96a1822d6afc",
        "title": "User Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4efb7aec-a97c-4dc7-9354-8cab60269d12",
            "title": "POST /users",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "User Route Tests POST /users should create a new user",
                "timedOut": false,
                "duration": 379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser@example.com';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(res.body._id).then((user) => {\n      expect(user).toBeTruthy();\n      expect(user.password).not.toBe(password);\n      expect(user.username).toBe(username);\n      done();\n    }).catch(err => done(err));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5827d945-ca4b-4b4d-8de6-5c8ee170e43d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return validation error if request is invalid",
                "fullTitle": "User Route Tests POST /users should return validation error if request is invalid",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6a571ff8-32df-430d-b74f-579e69570e35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error for requests with incomplete data",
                "fullTitle": "User Route Tests POST /users should return an error for requests with incomplete data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let email = \"testUser@example.com\";\nlet password = \"testPassword\";\nrequest(app)\n  .post('/users')\n  .send({email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1ee46420-54ef-47a3-8ede-e655b4f09f5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a user if the email is already in use",
                "fullTitle": "User Route Tests POST /users should not create a user if the email is already in use",
                "timedOut": false,
                "duration": 306,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = users[0].email;\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done)",
                "err": {},
                "isRoot": false,
                "uuid": "f2ef6c9f-187a-4e3f-9a38-dfd149ed6a02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5827d945-ca4b-4b4d-8de6-5c8ee170e43d",
              "6a571ff8-32df-430d-b74f-579e69570e35",
              "1ee46420-54ef-47a3-8ede-e655b4f09f5e",
              "f2ef6c9f-187a-4e3f-9a38-dfd149ed6a02"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 703,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b09a4947-58fa-444f-ba23-d9b1eb9bd0d3",
            "title": "GET /users/me",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return user if authenticated",
                "fullTitle": "User Route Tests GET /users/me should return user if authenticated",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((res) => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.email).toBe(users[0].email);\n    expect(res.body.emailVarified).toBe(users[0].emailVarified);\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bbe90968-31fb-444b-bcdb-b96f887b4a69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if unauthenticated user sends request",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if unauthenticated user sends request",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .expect(401)\n  .expect((res) => {\n    expect(res.body).toEqual({});\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dd720de3-f228-4a03-9fe8-c2dd96a29a32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/users/me')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9aa720e-9d6a-4137-ae79-d9ef818b5d42",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bbe90968-31fb-444b-bcdb-b96f887b4a69",
              "dd720de3-f228-4a03-9fe8-c2dd96a29a32",
              "c9aa720e-9d6a-4137-ae79-d9ef818b5d42"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d48c3e86-c9a4-4415-a288-8a864fcfb1ab",
            "title": "POST /users/login",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should login a valid user and return auth token",
                "fullTitle": "User Route Tests POST /users/login should login a valid user and return auth token",
                "timedOut": false,
                "duration": 310,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password\n  })\n  .expect(200)\n  .expect((res) => {\n    expect(res.headers['x-auth']).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.toObject().tokens[1]).toMatchObject({\n        access: 'auth',\n        token: res.headers['x-auth']\n      });\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3c6dac60-9494-4a55-9d94-dcf9f2d4543d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject invalid login",
                "fullTitle": "User Route Tests POST /users/login should reject invalid login",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password + 1\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.headers['x-auth']).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.tokens.length).toBe(1);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3ea0196e-6c31-46ba-bd7d-0b1b0167bfbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3c6dac60-9494-4a55-9d94-dcf9f2d4543d",
              "3ea0196e-6c31-46ba-bd7d-0b1b0167bfbc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 617,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c2b7c814-1c5c-4532-b934-f7694f6d5c5f",
            "title": "DELETE /users/me/token",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove auth token on logout",
                "fullTitle": "User Route Tests DELETE /users/me/token should remove auth token on logout",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id).then(user => {\n      expect(user.tokens.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "512465d9-e40e-4353-826e-09c77fb48951",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for unauthenticated access",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error for unauthenticated access",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "952a0792-4d1b-4383-98fa-971873bc4b45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token used was not generated by the backend",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error if authentication token used was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete('/users/me/token')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5b0cc4c2-5940-460a-893a-cc679f8817ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "512465d9-e40e-4353-826e-09c77fb48951",
              "952a0792-4d1b-4383-98fa-971873bc4b45",
              "5b0cc4c2-5940-460a-893a-cc679f8817ec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "21ddb73d-9688-430f-abc0-f278eb9d2413",
            "title": "GET /users/emailVerification",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should generate a email verification link for authenticated users",
                "fullTitle": "User Route Tests GET /users/emailVerification should generate a email verification link for authenticated users",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVerificationLink).toBeTruthy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fd22a2d9-6e79-4a55-bf09-8929229010c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject unauthenticated acces with a 401 error code",
                "fullTitle": "User Route Tests GET /users/emailVerification should reject unauthenticated acces with a 401 error code",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b1f82de0-8c54-4aae-be78-793f1d310cf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token being used was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/emailVerification should return a 401 error if authentication token being used was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\n\nrequest(app)\n  .get('/users/emailVerification')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8fc771f2-8d04-423d-b01f-a814fdbdc6c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd22a2d9-6e79-4a55-bf09-8929229010c9",
              "b1f82de0-8c54-4aae-be78-793f1d310cf0",
              "8fc771f2-8d04-423d-b01f-a814fdbdc6c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3d7ab2db-8016-4111-b40a-57ecc08fb5a9",
            "title": "GET /users/verify",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should verify the user's email when requested with proper query parameters",
                "fullTitle": "User Route Tests GET /users/verify should verify the user's email when requested with proper query parameters",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: users[2].emailVerificationLink.toHexString()\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.user.email).toBe(users[2].email);\n    expect(res.body.user.emailVarified).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVarified).toBeTruthy();\n      expect(user.email).toBe(res.body.user.email);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "28e50dd8-ea66-4139-a66b-a7ac9919691b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error for request without query parameters",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error for request without query parameters",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .expect(400)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f03d3acf-e9b6-4331-aee2-68dd9d55e869",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error with a message if a user with provided email does not exist",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error with a message if a user with provided email does not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: 'invalidUser@example.com',\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c5a5f535-dd78-42eb-a2d9-dbd7dca30394",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 if verification query param was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 if verification query param was not generated by the backend",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dc1ce9da-ca84-4192-812d-ac4e5ad2e985",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28e50dd8-ea66-4139-a66b-a7ac9919691b",
              "f03d3acf-e9b6-4331-aee2-68dd9d55e869",
              "c5a5f535-dd78-42eb-a2d9-dbd7dca30394",
              "dc1ce9da-ca84-4192-812d-ac4e5ad2e985"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3282ec0d-3cb7-4ebf-9dd1-8fdbbb06986b",
        "title": "Todo Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "05292f31-538f-4438-9455-9a103ac9873f",
            "title": "POST /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ea28b14e-bf2c-44be-9d28-3c5207119277",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests POST /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nlet todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ffb4af5b-47ad-4e87-89eb-915424781425",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for user accessing this route without verifying their email",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b2c9495c-290c-4fa3-8d84-d8bbb5fba6c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo if incomplete todo is provided",
                "fullTitle": "Todo Route Tests POST /todos should not create a new todo if incomplete todo is provided",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(400)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7ed6de24-65fa-43a0-8fa3-511549adea77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo if an authenticated user requests with with valid todo",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo if an authenticated user requests with with valid todo",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo.title).toBe(res.body.title);\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a5fb4716-dc65-409d-b018-bd3e24875532",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo without reminder if invalid reminder date was provided",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo without reminder if invalid reminder date was provided",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  reminder: 'invalid date format'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.reminder).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(todo.reminder).toBeFalsy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4a0e400a-f618-437c-a8bd-d271b2a3e223",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not take the completedAt attribute value from the user",
                "fullTitle": "Todo Route Tests POST /todos should not take the completedAt attribute value from the user",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  completed: true,\n  completedAt: 24514\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n    expect(res.body.completed).toBe(todo.completed);\n    expect(new Date(res.body.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(data => {\n      expect(data._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(data.completed).toBe(true);\n      expect(new Date(data.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n      expect(new Date(data.completedAt).getTime()).toBe(new Date(res.body.completedAt).getTime());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fdae29ea-cf1c-43cc-8f00-610c174ab7ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea28b14e-bf2c-44be-9d28-3c5207119277",
              "ffb4af5b-47ad-4e87-89eb-915424781425",
              "b2c9495c-290c-4fa3-8d84-d8bbb5fba6c9",
              "7ed6de24-65fa-43a0-8fa3-511549adea77",
              "a5fb4716-dc65-409d-b018-bd3e24875532",
              "4a0e400a-f618-437c-a8bd-d271b2a3e223",
              "fdae29ea-cf1c-43cc-8f00-610c174ab7ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2a6302d2-f528-47b7-938d-c7ea6c59b7c5",
            "title": "GET /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "43ab1b1c-4523-40c4-a94c-4779ecbaac7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/todos')\n  .set('x-auth', token)\n  .expect(401)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "73707d6b-7371-47dd-94a1-afb7d4085c92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6b09d96e-aff8-4584-b36a-e171f4e8028e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return all todos of an authenticated user",
                "fullTitle": "Todo Route Tests GET /todos should return all todos of an authenticated user",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todos.length).toBe(1);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(res.body.todos.length);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1732405c-0344-4ed9-bec7-5ece47741bf9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "43ab1b1c-4523-40c4-a94c-4779ecbaac7b",
              "73707d6b-7371-47dd-94a1-afb7d4085c92",
              "6b09d96e-aff8-4584-b36a-e171f4e8028e",
              "1732405c-0344-4ed9-bec7-5ece47741bf9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "188d9a76-c008-4eab-8036-0dce05aa386c",
            "title": "GET /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d3b59ef9-d79d-4bd7-8406-70d9d7af26c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "509800ac-cf76-4bb4-bbf1-9250d0667bdd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "662152db-2a8b-4c67-89da-d30b962c4628",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "67f0e6c4-f885-471a-af70-0e42bb5ba620",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[1]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6ec9c6ec-b65d-4bd4-9ea9-1d026fed9cea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the todo if an authenticated user requests for a todo belonging to him",
                "fullTitle": "Todo Route Tests GET /todos/:id should return the todo if an authenticated user requests for a todo belonging to him",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findOne({_id: res.body.todo._id, _creator: res.body.todo._creator}).then(todo => {\n      expect(todo._id.toHexString()).toBe(todos[0]._id.toHexString());\n      expect(todo._creator.toHexString()).toBe(todos[0]._creator.toHexString());\n      expect(todo.title).toBe(todos[0].title);\n      expect(todo.description).toBe(todos[0].description);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8605c15a-1776-4222-a240-d5c90ad79dc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3b59ef9-d79d-4bd7-8406-70d9d7af26c2",
              "509800ac-cf76-4bb4-bbf1-9250d0667bdd",
              "662152db-2a8b-4c67-89da-d30b962c4628",
              "67f0e6c4-f885-471a-af70-0e42bb5ba620",
              "6ec9c6ec-b65d-4bd4-9ea9-1d026fed9cea",
              "8605c15a-1776-4222-a240-d5c90ad79dc5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ebcee2bc-a01b-44e6-b337-3625fcf374b9",
            "title": "DELETE /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9a096710-e5fd-4046-85b1-b4a873a92f89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c4fdc6d5-9b39-4e5a-8007-e7c304db51e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a34f76c9-4b9b-4b8e-991e-020e24475833",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "21175202-00b0-48bd-806c-ff68620da6a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should not delete the todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .expect(404)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(1);\n      expect(todos[0]._id.toHexString()).toBe(todos[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2f8473dd-23b7-45fb-85f8-2a01828377d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should delete the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    \n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ee7d5bb1-e7e1-4ecf-b90d-01e7778f6711",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a096710-e5fd-4046-85b1-b4a873a92f89",
              "c4fdc6d5-9b39-4e5a-8007-e7c304db51e3",
              "a34f76c9-4b9b-4b8e-991e-020e24475833",
              "21175202-00b0-48bd-806c-ff68620da6a1",
              "2f8473dd-23b7-45fb-85f8-2a01828377d3",
              "ee7d5bb1-e7e1-4ecf-b90d-01e7778f6711"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 51,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "33cab2b8-be96-4441-a46b-7862cdb70191",
            "title": "PATCH /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 for unauthenticated access to this route",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f0a045b4-8895-4aaf-a5fa-75ac1a619a66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nlet token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "35f9f1d7-fc14-4806-aa75-372e70e2f5d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e0176d7a-49f0-4b49-8419-3e8b08e2d2c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/24514221`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "aec3d303-9e4f-40a0-9344-4b7b2442f3e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should not update todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c316cd20-31e3-4ea5-a9e1-ecfbefeffb13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should update the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todo.title);\n    expect(res.body.todo.completed).toBe(todo.completed);\n    expect(res.body.todo.completedAt).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(todos[0]._id).then(data => {\n      expect(data._id.toHexString()).toBe(res.body.todo._id);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3dcfffcd-2061-4ce2-a9ec-fbeb4b47652a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0a045b4-8895-4aaf-a5fa-75ac1a619a66",
              "35f9f1d7-fc14-4806-aa75-372e70e2f5d8",
              "e0176d7a-49f0-4b49-8419-3e8b08e2d2c4",
              "aec3d303-9e4f-40a0-9344-4b7b2442f3e5",
              "c316cd20-31e3-4ea5-a9e1-ecfbefeffb13",
              "3dcfffcd-2061-4ce2-a9ec-fbeb4b47652a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}