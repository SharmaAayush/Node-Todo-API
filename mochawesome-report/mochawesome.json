{
  "stats": {
    "suites": 13,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-29T15:40:22.069Z",
    "end": "2018-05-29T15:40:43.150Z",
    "duration": 21081,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "97067c23-14e9-4c20-84eb-b8f3f49856da",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "31356a8b-6248-4b3a-b1e3-9542cfd8cf4e",
        "title": "User Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateTodos",
            "fullTitle": "User Route Tests \"before all\" hook: populateTodos",
            "timedOut": false,
            "duration": 54,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
            "err": {},
            "isRoot": false,
            "uuid": "afaf8ef2-5471-4133-80eb-7c23974e04bb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "User Route Tests \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 944,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
            "err": {},
            "isRoot": false,
            "uuid": "39d4efa6-1aff-448f-9bac-eae8966acc52",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "67b38c0c-5533-4727-878c-5c5c202b577e",
            "title": "POST /users",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "User Route Tests POST /users should create a new user",
                "timedOut": false,
                "duration": 392,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser@example.com';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(res.body._id).then((user) => {\n      expect(user).toBeTruthy();\n      expect(user.password).not.toBe(password);\n      expect(user.username).toBe(username);\n      done();\n    }).catch(err => done(err));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f06293fc-122a-428c-88e6-4927db470d55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return validation error if request is invalid",
                "fullTitle": "User Route Tests POST /users should return validation error if request is invalid",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = 'testUser';\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "69afa1d5-a602-49e3-bcf4-31688f9b1696",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error for requests with incomplete data",
                "fullTitle": "User Route Tests POST /users should return an error for requests with incomplete data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let email = \"testUser@example.com\";\nlet password = \"testPassword\";\nrequest(app)\n  .post('/users')\n  .send({email, password})\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d9981f7d-4658-4166-9b39-2d18bc3ffc0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a user if the email is already in use",
                "fullTitle": "User Route Tests POST /users should not create a user if the email is already in use",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let username = 'testUser';\nlet email = users[0].email;\nlet password = 'testPassword';\nrequest(app)\n  .post('/users')\n  .send({username, email, password})\n  .expect(400)\n  .end(done)",
                "err": {},
                "isRoot": false,
                "uuid": "73ae8f1b-00fb-498a-9462-06126061b4a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f06293fc-122a-428c-88e6-4927db470d55",
              "69afa1d5-a602-49e3-bcf4-31688f9b1696",
              "d9981f7d-4658-4166-9b39-2d18bc3ffc0a",
              "73ae8f1b-00fb-498a-9462-06126061b4a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 727,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1e8bd3fd-c9aa-4287-94c7-3811c02ffb9e",
            "title": "GET /users/me",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return user if authenticated",
                "fullTitle": "User Route Tests GET /users/me should return user if authenticated",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((res) => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.email).toBe(users[0].email);\n    expect(res.body.emailVarified).toBe(users[0].emailVarified);\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "28cabc48-de9a-4e95-a478-9c04bc15569b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if unauthenticated user sends request",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if unauthenticated user sends request",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/me')\n  .expect(401)\n  .expect((res) => {\n    expect(res.body).toEqual({});\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3733ecc3-7349-4098-8e87-db77044ea9dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/me should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/users/me')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2531cc2a-2162-4ab2-949d-7e5fbcfb4f45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28cabc48-de9a-4e95-a478-9c04bc15569b",
              "3733ecc3-7349-4098-8e87-db77044ea9dd",
              "2531cc2a-2162-4ab2-949d-7e5fbcfb4f45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "95d83070-a650-4399-9e0d-47b29f97979d",
            "title": "POST /users/login",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should login a valid user and return auth token",
                "fullTitle": "User Route Tests POST /users/login should login a valid user and return auth token",
                "timedOut": false,
                "duration": 330,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password\n  })\n  .expect(200)\n  .expect((res) => {\n    expect(res.headers['x-auth']).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.toObject().tokens[1]).toMatchObject({\n        access: 'auth',\n        token: res.headers['x-auth']\n      });\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5ac363bf-577a-495b-859f-809727f1fd5b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject invalid login",
                "fullTitle": "User Route Tests POST /users/login should reject invalid login",
                "timedOut": false,
                "duration": 319,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post('/users/login')\n  .send({\n    email: users[1].email,\n    password: users[1].password + 1\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.headers['x-auth']).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id).then((user) => {\n      expect(user.tokens.length).toBe(1);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "17f6e03b-bd83-48a3-bfbb-337949c76faa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ac363bf-577a-495b-859f-809727f1fd5b",
              "17f6e03b-bd83-48a3-bfbb-337949c76faa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 649,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2dff59a1-fc2d-4699-af94-a28ec707c7b6",
            "title": "DELETE /users/me/token",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove auth token on logout",
                "fullTitle": "User Route Tests DELETE /users/me/token should remove auth token on logout",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id).then(user => {\n      expect(user.tokens.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "020123c9-df4e-46eb-b80f-b87ef034634a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for unauthenticated access",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error for unauthenticated access",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/users/me/token')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6c39b5c9-8e36-4b7e-b94e-0538bf35e05e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token used was not generated by the backend",
                "fullTitle": "User Route Tests DELETE /users/me/token should return a 401 error if authentication token used was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete('/users/me/token')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8afea6ff-f43d-4ff8-baac-dc158c43ae59",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "020123c9-df4e-46eb-b80f-b87ef034634a",
              "6c39b5c9-8e36-4b7e-b94e-0538bf35e05e",
              "8afea6ff-f43d-4ff8-baac-dc158c43ae59"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "127a476c-d1df-48e6-83ba-bfd534718ff9",
            "title": "GET /users/emailVerification",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should generate a email verification link for authenticated users",
                "fullTitle": "User Route Tests GET /users/emailVerification should generate a email verification link for authenticated users",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVerificationLink).toBeTruthy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6aa256ac-3b1a-4140-af0c-57018e62a7ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reject unauthenticated acces with a 401 error code",
                "fullTitle": "User Route Tests GET /users/emailVerification should reject unauthenticated acces with a 401 error code",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/emailVerification')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8d791782-4f1f-4cb8-b54c-f0759e34d854",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error if authentication token being used was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/emailVerification should return a 401 error if authentication token being used was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\n\nrequest(app)\n  .get('/users/emailVerification')\n  .set('x-auth', token)\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1b1d6e8f-c989-46c4-bacd-3100df927364",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6aa256ac-3b1a-4140-af0c-57018e62a7ad",
              "8d791782-4f1f-4cb8-b54c-f0759e34d854",
              "1b1d6e8f-c989-46c4-bacd-3100df927364"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 49,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1041358a-a398-4265-9516-961e48111c90",
            "title": "GET /users/verify",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should verify the user's email when requested with proper query parameters",
                "fullTitle": "User Route Tests GET /users/verify should verify the user's email when requested with proper query parameters",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: users[2].emailVerificationLink.toHexString()\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.user.email).toBe(users[2].email);\n    expect(res.body.user.emailVarified).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[2]._id).then(user => {\n      expect(user.emailVarified).toBeTruthy();\n      expect(user.email).toBe(res.body.user.email);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fdce4a0c-3be7-4093-8ae3-23219f83f28b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error for request without query parameters",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error for request without query parameters",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .expect(400)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4bd0fa2f-aeae-483d-8223-3a4c1f0c76bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error with a message if a user with provided email does not exist",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 error with a message if a user with provided email does not exist",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: 'invalidUser@example.com',\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6e307a6c-1546-4f42-beab-871639f974f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 if verification query param was not generated by the backend",
                "fullTitle": "User Route Tests GET /users/verify should return a 400 if verification query param was not generated by the backend",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/users/verify')\n  .query({\n    email: users[2].email,\n    vk: new ObjectID().toHexString()\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.error).toBeTruthy();\n    expect(typeof res.body.error).toBe(\"string\");\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "54e5ae54-715d-45a5-87a8-d3144352b1d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fdce4a0c-3be7-4093-8ae3-23219f83f28b",
              "4bd0fa2f-aeae-483d-8223-3a4c1f0c76bd",
              "6e307a6c-1546-4f42-beab-871639f974f5",
              "54e5ae54-715d-45a5-87a8-d3144352b1d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "24a08fa3-3f73-49e8-b48c-7bfcdbf9bd6f",
        "title": "Todo Route Tests",
        "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
        "file": "\\server\\tests\\server.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "Todo Route Tests \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 936,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(0);\nUser.remove({}).then(() => {\n  let userOne = new User(users[0]).save();\n  let userTwo = new User(users[1]).save();\n  let userThree = new User(users[2]).save();\n  return Promise.all([userOne, userTwo, userThree]);\n}, e => console.log(e)).then(() => done());",
            "err": {},
            "isRoot": false,
            "uuid": "d932025a-aa10-4e16-b55b-246421bf8b5d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "Todo Route Tests \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(0);\nTodo.remove({}).then(() => {\n  return Todo.insertMany(todos);\n}, e => console.log(e)).then(() => done());",
            "err": {},
            "isRoot": false,
            "uuid": "9f65388a-d73f-484e-ba8f-179a2b761b66",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "97b0edd5-0104-4f7e-a1d1-81b4a62b16bf",
            "title": "POST /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d7f99950-9b4d-4aee-b5bc-862bc524dbc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests POST /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nlet todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5628c5a0-1ca5-4df4-a168-58e9b7e58c23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email",
                "fullTitle": "Todo Route Tests POST /todos should return 401 error for user accessing this route without verifying their email",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6fb0addc-c91f-4ce3-8d8d-033e0393bcc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo if incomplete todo is provided",
                "fullTitle": "Todo Route Tests POST /todos should not create a new todo if incomplete todo is provided",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(400)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "08be65e8-87a9-4425-b762-e464d038b2e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo if an authenticated user requests with with valid todo",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo if an authenticated user requests with with valid todo",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo.title).toBe(res.body.title);\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "89ed2ca1-928a-4aab-adb2-f6cbde103afe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new todo without reminder if invalid reminder date was provided",
                "fullTitle": "Todo Route Tests POST /todos should create a new todo without reminder if invalid reminder date was provided",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  reminder: 'invalid date format'\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.reminder).toBeFalsy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(todo => {\n      expect(todo._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(todo.reminder).toBeFalsy();\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3beaac8d-a153-417a-83ee-5e95acde4fc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not take the completedAt attribute value from the user",
                "fullTitle": "Todo Route Tests POST /todos should not take the completedAt attribute value from the user",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: 'testTodoTitle',\n  description: 'testDescription',\n  completed: true,\n  completedAt: 24514\n};\nrequest(app)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(todo.title);\n    expect(res.body.description).toBe(todo.description);\n    expect(res.body.completed).toBe(todo.completed);\n    expect(new Date(res.body.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(res.body._id).then(data => {\n      expect(data._creator.toHexString()).toBe(users[0]._id.toHexString());\n      expect(data.completed).toBe(true);\n      expect(new Date(data.completedAt).getTime()).not.toBe(new Date(todo.completedAt).getTime());\n      expect(new Date(data.completedAt).getTime()).toBe(new Date(res.body.completedAt).getTime());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "81922885-47f2-41b6-8af1-7f8ce7106ed0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7f99950-9b4d-4aee-b5bc-862bc524dbc1",
              "5628c5a0-1ca5-4df4-a168-58e9b7e58c23",
              "6fb0addc-c91f-4ce3-8d8d-033e0393bcc5",
              "08be65e8-87a9-4425-b762-e464d038b2e9",
              "89ed2ca1-928a-4aab-adb2-f6cbde103afe",
              "3beaac8d-a153-417a-83ee-5e95acde4fc8",
              "81922885-47f2-41b6-8af1-7f8ce7106ed0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 71,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6de3aa3f-6b01-4705-b4c5-d6c15ce78dfd",
            "title": "GET /todos",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a 401 error for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for unauthenticated access to this route",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "480c7147-0f6e-425e-bc1d-0642a20c8d30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get('/todos')\n  .set('x-auth', token)\n  .expect(401)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1eef3dd3-8c08-46b0-a0ff-2a506b220def",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos should return a 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d90d5081-ef4c-4ffb-a1bd-7cc83f1bda80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return all todos of an authenticated user",
                "fullTitle": "Todo Route Tests GET /todos should return all todos of an authenticated user",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todos.length).toBe(1);\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(res.body.todos.length);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1a3393e5-e1ec-4d7e-9fd7-3576b3275f4e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "480c7147-0f6e-425e-bc1d-0642a20c8d30",
              "1eef3dd3-8c08-46b0-a0ff-2a506b220def",
              "d90d5081-ef4c-4ffb-a1bd-7cc83f1bda80",
              "1a3393e5-e1ec-4d7e-9fd7-3576b3275f4e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8d4f7396-985f-42a6-a2e0-2a688bf0fd35",
            "title": "GET /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "741992b0-fc76-4b71-af53-0056cf6994a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests GET /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c984d37f-783e-47db-94ea-06efc8b0abcd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "90f6fa20-692b-4966-a231-5ed31a3939bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bc3c36bd-0278-4474-b66c-43e9aee269f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "fullTitle": "Todo Route Tests GET /todos/:id should return 404 if the token's id doesn't belong to the user requesting for the todo",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[1]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7296ed75-c9d5-4ac0-977d-0d1ebb096d1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the todo if an authenticated user requests for a todo belonging to him",
                "fullTitle": "Todo Route Tests GET /todos/:id should return the todo if an authenticated user requests for a todo belonging to him",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findOne({_id: res.body.todo._id, _creator: res.body.todo._creator}).then(todo => {\n      expect(todo._id.toHexString()).toBe(todos[0]._id.toHexString());\n      expect(todo._creator.toHexString()).toBe(todos[0]._creator.toHexString());\n      expect(todo.title).toBe(todos[0].title);\n      expect(todo.description).toBe(todos[0].description);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "979f40b1-3b75-467c-b34b-fdd8dc11d158",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "741992b0-fc76-4b71-af53-0056cf6994a4",
              "c984d37f-783e-47db-94ea-06efc8b0abcd",
              "90f6fa20-692b-4966-a231-5ed31a3939bc",
              "bc3c36bd-0278-4474-b66c-43e9aee269f0",
              "7296ed75-c9d5-4ac0-977d-0d1ebb096d1d",
              "979f40b1-3b75-467c-b34b-fdd8dc11d158"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 60,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8a988240-e728-4c1f-acb9-d6a9fa92da98",
            "title": "DELETE /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access tto this route",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 for unauthenticated access tto this route",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "80766dc3-2f6c-42e3-b3e4-8700fbf005ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "54e51909-2936-422b-95c1-cae9025a73d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "af6f1a03-ff6b-4d57-a12f-c2d0be7108f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete('/todos/24514221')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "49b6f9d1-1f46-456f-93be-b78cb0519bbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should not delete the todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .expect(404)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(1);\n      expect(todos[0]._id.toHexString()).toBe(todos[0]._id.toHexString());\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dc0fc0a3-6726-4579-a9ce-6b2617afabf5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests DELETE /todos/:id should delete the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todos[0].title);\n    expect(res.body.todo.description).toBe(todos[0].description);\n    expect(res.body.todo._creator).toBe(todos[0]._creator.toHexString());\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    \n    Todo.find({_creator: users[0]._id}).then(todos => {\n      expect(todos.length).toBe(0);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "25d4e365-c1dd-4b5f-9c7f-c45d68383d3c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "80766dc3-2f6c-42e3-b3e4-8700fbf005ea",
              "54e51909-2936-422b-95c1-cae9025a73d1",
              "af6f1a03-ff6b-4d57-a12f-c2d0be7108f6",
              "49b6f9d1-1f46-456f-93be-b78cb0519bbe",
              "dc0fc0a3-6726-4579-a9ce-6b2617afabf5",
              "25d4e365-c1dd-4b5f-9c7f-c45d68383d3c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 63,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "90d2d98f-357e-40b2-ae70-00f9394cee43",
            "title": "PATCH /todos/:id",
            "fullFile": "E:\\Major Project\\Node-Todo\\server\\tests\\server.spec.js",
            "file": "\\server\\tests\\server.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 401 for unauthenticated access to this route",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 for unauthenticated access to this route",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b21f09c0-000f-49d7-8d10-940dc4c3fefa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an authentication error if authentication token was not generated by the backend",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return an authentication error if authentication token was not generated by the backend",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nlet token = jwt.sign({\n  _id: users[0]._id.toHexString(),\n  access: 'auth'\n}, 'some secret used by user to generate custom token').toString();\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9cf4d2f5-0b6b-4e5d-bcb1-041804db2cc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 401 error for user accessing this route without verifying their email first",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 401 error for user accessing this route without verifying their email first",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[2].tokens[0].token)\n  .send(todo)\n  .expect(401)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3dc94a64-a230-4d95-b108-dd595ce42cd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 error if invalid todo id is used",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should return 404 error if invalid todo id is used",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/24514221`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "569c2a65-c768-4c26-8585-cd4c42bac283",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update todo if it doesn't belong to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should not update todo if it doesn't belong to the requesting user",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[1].tokens[0].token)\n  .send(todo)\n  .expect(404)\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d863df44-0d02-4b4c-b18e-b4138e49ae91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update the todo if it belongs to the requesting user",
                "fullTitle": "Todo Route Tests PATCH /todos/:id should update the todo if it belongs to the requesting user",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let todo = {\n  title: \"updatedTestTodo\",\n  completed: true\n};\nrequest(app)\n  .patch(`/todos/${todos[0]._id}`)\n  .set('x-auth', users[0].tokens[0].token)\n  .send(todo)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.todo._id).toBe(todos[0]._id.toHexString());\n    expect(res.body.todo.title).toBe(todo.title);\n    expect(res.body.todo.completed).toBe(todo.completed);\n    expect(res.body.todo.completedAt).toBeTruthy();\n  })\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    Todo.findById(todos[0]._id).then(data => {\n      expect(data._id.toHexString()).toBe(res.body.todo._id);\n      done();\n    }).catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6e9ec4a3-8363-4b47-afb8-d7bd02bd79a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b21f09c0-000f-49d7-8d10-940dc4c3fefa",
              "9cf4d2f5-0b6b-4e5d-bcb1-041804db2cc8",
              "3dc94a64-a230-4d95-b108-dd595ce42cd0",
              "569c2a65-c768-4c26-8585-cd4c42bac283",
              "d863df44-0d02-4b4c-b18e-b4138e49ae91",
              "6e9ec4a3-8363-4b47-afb8-d7bd02bd79a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}